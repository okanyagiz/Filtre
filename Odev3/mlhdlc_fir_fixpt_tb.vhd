-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\okany\Documents\MATLAB\odev_3\codegen\mlhdlc_fir\hdlsrc\mlhdlc_fir_fixpt_tb.vhd
-- Created: 2022-05-23 23:03:49
-- 
-- Generated by MATLAB 9.11, MATLAB Coder 5.3 and HDL Coder 3.19
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- outdatabuf                    ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: mlhdlc_fir_fixpt_tb
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY work;
USE work.mlhdlc_fir_fixpt_pkg.ALL;
USE work.mlhdlc_fir_fixpt_tb_pkg.ALL;

ENTITY mlhdlc_fir_fixpt_tb IS
END mlhdlc_fir_fixpt_tb;


ARCHITECTURE rtl OF mlhdlc_fir_fixpt_tb IS

  -- Component Declarations
  COMPONENT mlhdlc_fir_fixpt_tb_data
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          indatabuf_addr                  :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          outdatabuf_addr                 :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          tb_enb_delay                    :   IN    std_logic;
          rdEnb                           :   IN    std_logic;
          ce_out                          :   IN    std_logic;
          indatabuf                       :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En10
          outdatabuf_expected             :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14_En10
          );
  END COMPONENT;

  COMPONENT mlhdlc_fir_fixpt
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          indatabuf                       :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En10
          ce_out                          :   OUT   std_logic;
          outdatabuf                      :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14_En10
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : mlhdlc_fir_fixpt_tb_data
    USE ENTITY work.mlhdlc_fir_fixpt_tb_data(rtl);

  FOR ALL : mlhdlc_fir_fixpt
    USE ENTITY work.mlhdlc_fir_fixpt(rtl);

  -- Signals
  SIGNAL clk                              : std_logic;
  SIGNAL reset                            : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL outdatabuf_done                  : std_logic;  -- ufix1
  SIGNAL rdEnb                            : std_logic;
  SIGNAL outdatabuf_done_enb              : std_logic;  -- ufix1
  SIGNAL outdatabuf_addr                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL outdatabuf_active                : std_logic;  -- ufix1
  SIGNAL outdatabuf_addr_delay_1          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL indatabuf_addr                   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL indatabuf_active                 : std_logic;  -- ufix1
  SIGNAL tb_enb                           : std_logic;
  SIGNAL indatabuf_enb                    : std_logic;  -- ufix1
  SIGNAL indatabuf_addr_delay_1           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL ce_out                           : std_logic;
  SIGNAL indatabuf_1                      : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL outdatabuf_ref                   : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL check1_done                      : std_logic;  -- ufix1
  SIGNAL snkDonen                         : std_logic;
  SIGNAL resetn                           : std_logic;
  SIGNAL outdatabuf                       : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL outdatabuf_enb                   : std_logic;  -- ufix1
  SIGNAL outdatabuf_lastAddr              : std_logic;  -- ufix1
  SIGNAL outdatabuf_signed                : signed(13 DOWNTO 0);  -- sfix14_En10
  SIGNAL outdatabuf_ref_signed            : signed(13 DOWNTO 0);  -- sfix14_En10
  SIGNAL outdatabuf_testFailure           : std_logic;  -- ufix1

BEGIN
  u_mlhdlc_fir_fixpt_tb_data : mlhdlc_fir_fixpt_tb_data
    PORT MAP( clk => clk,
              reset => reset,
              indatabuf_addr => std_logic_vector(indatabuf_addr_delay_1),  -- ufix9
              outdatabuf_addr => std_logic_vector(outdatabuf_addr_delay_1),  -- ufix9
              tb_enb_delay => tb_enb,
              rdEnb => rdEnb,
              ce_out => ce_out,
              indatabuf => indatabuf_1,  -- sfix14_En10
              outdatabuf_expected => outdatabuf_ref  -- sfix14_En10
              );

  u_mlhdlc_fir_fixpt : mlhdlc_fir_fixpt
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => enb,
              indatabuf => indatabuf_1,  -- sfix14_En10
              ce_out => ce_out,
              outdatabuf => outdatabuf  -- sfix14_En10
              );

  outdatabuf_done_enb <= outdatabuf_done AND rdEnb;

  
  outdatabuf_active <= '1' WHEN outdatabuf_addr /= to_unsigned(16#1E2#, 9) ELSE
      '0';

  outdatabuf_addr_delay_1 <= outdatabuf_addr AFTER 1 ns;

  
  indatabuf_active <= '1' WHEN indatabuf_addr /= to_unsigned(16#1E2#, 9) ELSE
      '0';

  indatabuf_enb <= indatabuf_active AND (rdEnb AND tb_enb);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 482
  indatabuf_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      indatabuf_addr <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF indatabuf_enb = '1' THEN
        IF indatabuf_addr >= to_unsigned(16#1E2#, 9) THEN 
          indatabuf_addr <= to_unsigned(16#000#, 9);
        ELSE 
          indatabuf_addr <= indatabuf_addr + to_unsigned(16#001#, 9);
        END IF;
      END IF;
    END IF;
  END PROCESS indatabuf_process;


  indatabuf_addr_delay_1 <= indatabuf_addr AFTER 1 ns;

  snkDonen <=  NOT check1_done;

  resetn <=  NOT reset;

  tb_enb <= resetn AND snkDonen;

  
  rdEnb <= tb_enb WHEN check1_done = '0' ELSE
      '0';

  enb <= rdEnb AFTER 2 ns;

  reset_gen: PROCESS 
  BEGIN
    reset <= '1';
    WAIT FOR 20 ns;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR 2 ns;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  clk_gen: PROCESS 
  BEGIN
    clk <= '1';
    WAIT FOR 5 ns;
    clk <= '0';
    WAIT FOR 5 ns;
    IF check1_done = '1' THEN
      clk <= '1';
      WAIT FOR 5 ns;
      clk <= '0';
      WAIT FOR 5 ns;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  outdatabuf_enb <= ce_out AND outdatabuf_active;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 482
  outdatabuf_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      outdatabuf_addr <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF outdatabuf_enb = '1' THEN
        IF outdatabuf_addr >= to_unsigned(16#1E2#, 9) THEN 
          outdatabuf_addr <= to_unsigned(16#000#, 9);
        ELSE 
          outdatabuf_addr <= outdatabuf_addr + to_unsigned(16#001#, 9);
        END IF;
      END IF;
    END IF;
  END PROCESS outdatabuf_1_process;


  
  outdatabuf_lastAddr <= '1' WHEN outdatabuf_addr >= to_unsigned(16#1E2#, 9) ELSE
      '0';

  outdatabuf_done <= outdatabuf_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF outdatabuf_done_enb = '1' THEN
        check1_done <= outdatabuf_done;
      END IF;
    END IF;
  END PROCESS checkDone_1_process;

  outdatabuf_signed <= signed(outdatabuf);

  outdatabuf_ref_signed <= signed(outdatabuf_ref);

  outdatabuf_signed_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      outdatabuf_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND outdatabuf_signed /= outdatabuf_ref_signed THEN
        outdatabuf_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in outdatabuf_signed: Expected " & to_hex(outdatabuf_ref_signed) & (" Actual " & to_hex(outdatabuf_signed))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS outdatabuf_signed_checker;

  completed_msg: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF check1_done = '1' THEN
        IF outdatabuf_testFailure = '0' THEN
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (PASSED)**************"
            SEVERITY NOTE;
        ELSE
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (FAILED)**************"
            SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

END rtl;

